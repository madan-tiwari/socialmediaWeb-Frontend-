{"ast":null,"code":"var _jsxFileName = \"E:\\\\Agile Web App\\\\social media (frontend)\\\\src\\\\post\\\\UpdatePost.js\";\nimport React, { Component } from 'react';\nimport { singlePost, update } from './postAPI';\nimport { isAuthenticated } from '../user/Profile';\nimport { Redirect } from 'react-router-dom';\nimport DefaultPostImage from '../images/default_avatar.png'; //when this component mounts we grab postId and make get request to backend to get the single post\n//we sent postId to init method\n\nclass UpdatePost extends Component {\n  constructor() {\n    super();\n\n    this.init = postId => {\n      singlePost(postId).then(data => {\n        if (data.error) {\n          this.setState({\n            redirectToProfile: true\n          });\n          console.log(\"ERROR\");\n        } else {\n          // console.log(data)\n          this.setState({\n            id: data._id,\n            title: data.title,\n            body: data.body,\n            error: \"\"\n          });\n        }\n      });\n    };\n\n    this.isValid = () => {\n      const {\n        title,\n        body,\n        fileSize\n      } = this.state;\n\n      if (fileSize > 100000) {\n        //1 MB\n        this.setState({\n          error: \"FILE IS TOO LARGE TO UPLOAD\"\n        });\n        return false;\n      }\n\n      if (title.length === 0) {\n        this.setState({\n          error: \"PLEASE ENTER THE TITLE\"\n        });\n        return false;\n      }\n\n      if (body.length === 0) {\n        this.setState({\n          error: \"PLEASE ENTER THE BODY\"\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        error: \"\"\n      });\n      this.setState({\n        loading: false\n      }); //we need to target the files in the events to grab from the input\n      // checks if we have photo in the name(params)\n\n      const value = name === 'photo' ? event.target.files[0] : event.target.value; //limiting upload filesize\n\n      const fileSize = name === 'photo' ? event.target.files[0].size : 0; //we populate the userData\n      //if the name is email -> it will have the value of email\n      //if the name is photo -> it will have the value of event.target.files[0]\n\n      this.postData.set(name, value); //using array syntax it changes over time\n      //based on which it is used it takes target value\n      //eg takes password when used in password\n\n      this.setState({\n        [name]: value,\n        fileSize\n      });\n    };\n\n    this.clickSubmit = event => {\n      event.preventDefault(); //stop the default behaviour / page reload\n      //when the server is busy loading the form data and uploading images to keep the user experience\n\n      this.setState({\n        loading: true\n      });\n\n      if (this.isValid()) {\n        //we need name email password from the state\n        const postId = this.state.id;\n        const token = isAuthenticated().token;\n        update(postId, token, this.postData) //postData is updated data from the form\n        .then(data => {\n          if (data.error) this.setState({\n            error: data.error\n          });else // console.log(\"NEW POST\", data);\n            this.setState({\n              loading: false,\n              title: \"\",\n              body: \"\",\n              photo: \"\",\n              redirectToProfile: true\n            });\n        });\n      }\n    };\n\n    this.state = {\n      id: \"\",\n      title: \"\",\n      body: \"\",\n      redirectToProfile: false,\n      error: \"\",\n      fileSize: 0,\n      loading: false\n    };\n  } //it takes arguement from the componentDidMount (userId)\n\n\n  //lifecycle method -> when the component is mounted and be ready\n  //then we get the user id\n  componentDidMount() {\n    this.postData = new FormData(); //browser api\n    // console.log(\"Userrouter from route params:\", this.props.match.params.userId);\n\n    const postId = this.props.match.params.postId; //giving userId to init method to process\n\n    this.init(postId);\n  } //checks if the input fields are valid\n\n\n  render() {\n    if (this.state.redirectToProfile) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/user/${isAuthenticated().user._id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"mt-5 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, this.state.title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      style: {\n        display: this.state.error ? \"\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, this.state.error), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, \"Processing...\")) : \"\", /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        height: \"200px\",\n        width: \"auto\"\n      },\n      className: \"img-thumbnail\",\n      src: `${process.env.REACT_APP_API_URL}/post/photo/${this.state.id}?${new Date().getTime()}`,\n      onError: i => i.target.src = `${DefaultPostImage}`,\n      alt: this.state.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 25\n      }\n    }, \"PHOTO\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleChange(\"photo\"),\n      className: \"form-control\",\n      accept: \"image/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }, \"TITLE\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange(\"title\"),\n      className: \"form-control\",\n      value: this.state.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }, \"DESCRIPTION\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      onChange: this.handleChange(\"body\"),\n      className: \"form-control\",\n      value: this.state.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.clickSubmit,\n      className: \"btn btn-raised btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    }, \"UPDATE POST\")));\n  }\n\n}\n\nexport default UpdatePost;","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/post/UpdatePost.js"],"names":["React","Component","singlePost","update","isAuthenticated","Redirect","DefaultPostImage","UpdatePost","constructor","init","postId","then","data","error","setState","redirectToProfile","console","log","id","_id","title","body","isValid","fileSize","state","length","handleChange","name","event","loading","value","target","files","size","postData","set","clickSubmit","preventDefault","token","photo","componentDidMount","FormData","props","match","params","render","user","display","height","width","process","env","REACT_APP_API_URL","Date","getTime","i","src"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport  { singlePost, update } from './postAPI';\nimport { isAuthenticated } from '../user/Profile';\nimport { Redirect } from 'react-router-dom';\n\nimport DefaultPostImage from '../images/default_avatar.png';\n\n\n\n\n//when this component mounts we grab postId and make get request to backend to get the single post\n//we sent postId to init method\nclass UpdatePost extends Component {\n\n    constructor(){\n        super()\n        this.state ={\n            id:\"\",\n            title:\"\",\n            body:\"\",\n            redirectToProfile: false,\n            error:\"\",\n            fileSize: 0,\n            loading:false\n        }\n    }\n\n   //it takes arguement from the componentDidMount (userId)\n   init = (postId)=>{\n    singlePost(postId)\n    .then(data =>{\n            if(data.error){\n                this.setState({redirectToProfile: true})\n                console.log(\"ERROR\")\n            }\n            else{\n                // console.log(data)\n                this.setState({\n                    id: data._id, \n                    title: data.title, \n                    body:data.body,\n                    error: \"\", \n                })\n            }\n        })\n    }\n\n\n//lifecycle method -> when the component is mounted and be ready\n//then we get the user id\ncomponentDidMount(){\n    this.postData = new FormData(); //browser api\n    // console.log(\"Userrouter from route params:\", this.props.match.params.userId);\n    const postId = this.props.match.params.postId\n    //giving userId to init method to process\n    this.init(postId)\n}\n\n\n //checks if the input fields are valid\n isValid = () => {\n    const{title, body, fileSize} = this.state\n\n    if(fileSize > 100000){  //1 MB\n        this.setState({error: \"FILE IS TOO LARGE TO UPLOAD\"})\n        return false\n    }\n    if(title.length === 0 ){\n        this.setState({error: \"PLEASE ENTER THE TITLE\"})\n        return false\n    }\n\n    if(body.length === 0 ){\n        this.setState({error: \"PLEASE ENTER THE BODY\"})\n        return false\n    }\n   \n    \n    return true\n}\n\n//creating handle change method\n    //higher order function -> returns another function\n    // coz we need strings PLUS access to events (we used onChanged)\n    handleChange = (name)=> (event) => {\n        this.setState({error:\"\"})\n        this.setState({loading: false})\n\n        //we need to target the files in the events to grab from the input\n        // checks if we have photo in the name(params)\n        const value = name === 'photo' ? event.target.files[0] : event.target.value\n\n\n        //limiting upload filesize\n        const fileSize = name === 'photo' ? event.target.files[0].size : 0;\n\n        //we populate the userData\n        //if the name is email -> it will have the value of email\n        //if the name is photo -> it will have the value of event.target.files[0]\n        this.postData.set(name, value)\n\n        //using array syntax it changes over time\n        //based on which it is used it takes target value\n        //eg takes password when used in password\n        this.setState({[name]: value, fileSize});\n    }\n\n    clickSubmit = event => {\n        event.preventDefault() //stop the default behaviour / page reload\n        //when the server is busy loading the form data and uploading images to keep the user experience\n        this.setState({loading: true})\n\n        if(this.isValid()){\n             //we need name email password from the state\n            const postId = this.state.id;\n            const token = isAuthenticated().token;\n\n           update(postId, token, this.postData) //postData is updated data from the form\n            .then(data => {\n                    if(data.error) this.setState({error: data.error})\n                    else \n                        // console.log(\"NEW POST\", data);\n                        this.setState({loading:false, title:\"\", body:\"\", photo:\"\", redirectToProfile:true})\n                 \n            })\n        }\n       \n    };\n\n    render() {\n        if(this.state.redirectToProfile){\n            return <Redirect to={`/user/${isAuthenticated().user._id}`}/>\n        }\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"mt-5 mb-5\">{this.state.title}</h2>\n                {/* {JSON.stringify(this.state)} */}\n\n                {/* to keep the error div hidden we are writing instyle css\n                double {{}}  first set for jsx. second for style\n                applying conditional rendering \n                if there is error displays error, if no error it wont be displayed\n                tertiary conditional statement */}\n                <div className= \"alert alert-danger\" style={{ display: this.state.error ? \"\" : \"none\"}}>\n                    {this.state.error}\n                </div>\n\n                {this.state.loading ? (\n                    <div className=\"jumbotron text-center\">\n                        <h2>Processing...</h2>\n                     </div>\n                ):(\"\")}\n\n                <img style = {{height: \"200px\", width: \"auto\"}} className=\"img-thumbnail\" src={`${process.env.REACT_APP_API_URL}/post/photo/${this.state.id}?${new Date().getTime()}`} onError={i => (i.target.src=`${DefaultPostImage}`)} alt={this.state.title}/>\n\n\n                {/* EDITPOST FORM */}\n                <form>\n                     {/* to send the form data we need browser api -> form data\n                     provides a way to easily construct a set of key/value pairs representing form fields and their values\n                     that can be sent using the XMLHttpRequest.send() method\n                      - uses same format a form would use if the encoding type were set to \"multipart/form-data\"\n                     */}\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">PHOTO</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <input type=\"file\" onChange={this.handleChange(\"photo\")}  className=\"form-control\" accept=\"image/*\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">TITLE</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <input type=\"text\" onChange={this.handleChange(\"title\")}  className=\"form-control\" value={this.state.title} />\n                    </div>\n         \n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">DESCRIPTION</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <textarea type=\"text\" onChange={this.handleChange(\"body\")}  className=\"form-control\" value={this.state.body} />\n                    </div>\n                    {/* when button is clicked register function is triggered */}\n                    <button onClick={this.clickSubmit} className=\"btn btn-raised btn-primary\">UPDATE POST</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default UpdatePost;"]},"metadata":{},"sourceType":"module"}