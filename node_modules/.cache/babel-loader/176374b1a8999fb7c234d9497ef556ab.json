{"ast":null,"code":"var _jsxFileName = \"E:\\\\Agile Web App\\\\social media (frontend)\\\\src\\\\post\\\\NewPost.js\";\n//we have userid from props like in profile\n//we get userId when the component mounts\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { createPost } from './postAPI';\nimport { isAuthenticated } from '../user/Profile'; // import DefaultAvatar from '../images/default_avatar.png';\n\nclass NewPost extends Component {\n  constructor() {\n    super();\n\n    this.isValid = () => {\n      const {\n        title,\n        body,\n        fileSize\n      } = this.state;\n\n      if (fileSize > 100000) {\n        //1 MB\n        this.setState({\n          error: \"FILE IS TOO LARGE TO UPLOAD\"\n        });\n        return false;\n      }\n\n      if (title.length === 0) {\n        this.setState({\n          error: \"PLEASE ENTER THE TITLE\"\n        });\n        return false;\n      }\n\n      if (body.length === 0) {\n        this.setState({\n          error: \"PLEASE ENTER THE BODY\"\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        error: \"\"\n      });\n      this.setState({\n        loading: false\n      }); //we need to target the files in the events to grab from the input\n      // checks if we have photo in the name(params)\n\n      const value = name === 'photo' ? event.target.files[0] : event.target.value; //limiting upload filesize\n\n      const fileSize = name === 'photo' ? event.target.files[0].size : 0; //we populate the userData\n      //if the name is email -> it will have the value of email\n      //if the name is photo -> it will have the value of event.target.files[0]\n\n      this.postData.set(name, value); //using array syntax it changes over time\n      //based on which it is used it takes target value\n      //eg takes password when used in password\n\n      this.setState({\n        [name]: value,\n        fileSize\n      });\n    };\n\n    this.clickSubmit = event => {\n      event.preventDefault(); //stop the default behaviour / page reload\n      //when the server is busy loading the form data and uploading images to keep the user experience\n\n      this.setState({\n        loading: true\n      });\n\n      if (this.isValid()) {\n        //we need name email password from the state\n        const userId = isAuthenticated().user._id;\n\n        const token = isAuthenticated().token;\n        createPost(userId, token, this.postData).then(data => {\n          if (data.error) this.setState({\n            error: data.error\n          });else console.log(\"NEW POST\", data);\n          this.setState({\n            loading: false,\n            title: \"\",\n            body: \"\",\n            photo: \"\",\n            redirectToProfile: true\n          });\n        });\n      }\n    };\n\n    this.state = {\n      title: \"\",\n      body: \"\",\n      photo: \"\",\n      error: \"\",\n      user: {},\n      fileSize: 0,\n      loading: false,\n      redirectToProfile: false\n    };\n  } //lifecycle method -> when the component is mounted and be ready\n  //then we get the user id\n\n\n  componentDidMount() {\n    this.postData = new FormData(); //browser api\n\n    this.setState({\n      user: isAuthenticated().user\n    });\n  } //checks if the input fields are valid\n\n\n  render() {\n    if (this.state.redirectToProfile) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/user/${this.state.user._id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"mt-5 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, \"CREATE NEW POST\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      style: {\n        display: this.state.error ? \"\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, this.state.error), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, \"Processing...\")) : \"\", /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }\n    }, \"PHOTO\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleChange(\"photo\"),\n      className: \"form-control\",\n      accept: \"image/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, \"TITLE\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange(\"title\"),\n      className: \"form-control\",\n      value: this.state.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, \"DESCRIPTION\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      onChange: this.handleChange(\"body\"),\n      className: \"form-control\",\n      value: this.state.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.clickSubmit,\n      className: \"btn btn-raised btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }, \"POST\")));\n  }\n\n}\n\nexport default NewPost;","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/post/NewPost.js"],"names":["React","Component","Redirect","createPost","isAuthenticated","NewPost","constructor","isValid","title","body","fileSize","state","setState","error","length","handleChange","name","event","loading","value","target","files","size","postData","set","clickSubmit","preventDefault","userId","user","_id","token","then","data","console","log","photo","redirectToProfile","componentDidMount","FormData","render","display"],"mappings":"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","sourcesContent":["//we have userid from props like in profile\n//we get userId when the component mounts\n\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { createPost } from './postAPI';\nimport { isAuthenticated } from '../user/Profile';\n\n// import DefaultAvatar from '../images/default_avatar.png';\n\n\nclass NewPost extends Component {\n    \n    constructor(){\n        super()\n        this.state={\n            title: \"\",\n            body:\"\",\n            photo:\"\",\n            error:\"\",\n            user: {}, \n            fileSize:0, \n            loading:false,\n            redirectToProfile: false\n        }\n    }\n    \n    \n    //lifecycle method -> when the component is mounted and be ready\n    //then we get the user id\n    componentDidMount(){\n        this.postData = new FormData(); //browser api\n        this.setState({user: isAuthenticated().user})\n    }\n\n    //checks if the input fields are valid\n    isValid = () => {\n        const{title, body, fileSize} = this.state\n\n        if(fileSize > 100000){  //1 MB\n            this.setState({error: \"FILE IS TOO LARGE TO UPLOAD\"})\n            return false\n        }\n        if(title.length === 0 ){\n            this.setState({error: \"PLEASE ENTER THE TITLE\"})\n            return false\n        }\n\n        if(body.length === 0 ){\n            this.setState({error: \"PLEASE ENTER THE BODY\"})\n            return false\n        }\n       \n        \n        return true\n    }\n    \n\n    //creating handle change method\n    //higher order function -> returns another function\n    // coz we need strings PLUS access to events (we used onChanged)\n    handleChange = (name)=> (event) => {\n        this.setState({error:\"\"})\n        this.setState({loading: false})\n\n        //we need to target the files in the events to grab from the input\n        // checks if we have photo in the name(params)\n        const value = name === 'photo' ? event.target.files[0] : event.target.value\n\n\n        //limiting upload filesize\n        const fileSize = name === 'photo' ? event.target.files[0].size : 0;\n\n        //we populate the userData\n        //if the name is email -> it will have the value of email\n        //if the name is photo -> it will have the value of event.target.files[0]\n        this.postData.set(name, value)\n\n        //using array syntax it changes over time\n        //based on which it is used it takes target value\n        //eg takes password when used in password\n        this.setState({[name]: value, fileSize});\n    }\n\n    clickSubmit = event => {\n        event.preventDefault() //stop the default behaviour / page reload\n        //when the server is busy loading the form data and uploading images to keep the user experience\n        this.setState({loading: true})\n\n        if(this.isValid()){\n             //we need name email password from the state\n            const userId = isAuthenticated().user._id;\n            const token = isAuthenticated().token;\n\n           createPost(userId, token, this.postData)\n            .then(data => {\n                    if(data.error) this.setState({error: data.error})\n                    else \n                        console.log(\"NEW POST\", data);\n                        this.setState({loading:false, title:\"\", body:\"\", photo:\"\", redirectToProfile:true})\n                 \n            })\n        }\n       \n    };\n\n    render() {\n        if(this.state.redirectToProfile){\n            return <Redirect to={`/user/${this.state.user._id}`}/>\n        }\n        return (\n            <div className=\"container\">\n                <h2 className=\"mt-5 mb-5\">CREATE NEW POST</h2>\n\n                {/* to keep the error div hidden we are writing instyle css\n                double {{}}  first set for jsx. second for style\n                applying conditional rendering \n                if there is error displays error, if no error it wont be displayed\n                tertiary conditional statement */}\n                <div className= \"alert alert-danger\" style={{ display: this.state.error ? \"\" : \"none\"}}>\n                    {this.state.error}\n                </div>\n\n                {this.state.loading ? (\n                    <div className=\"jumbotron text-center\">\n                        <h2>Processing...</h2>\n                     </div>\n                ):(\"\")}\n\n                 {/* NEWPOST FORM */}\n                 <form>\n                     {/* to send the form data we need browser api -> form data\n                     provides a way to easily construct a set of key/value pairs representing form fields and their values\n                     that can be sent using the XMLHttpRequest.send() method\n                      - uses same format a form would use if the encoding type were set to \"multipart/form-data\"\n                     */}\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">PHOTO</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <input type=\"file\" onChange={this.handleChange(\"photo\")}  className=\"form-control\" accept=\"image/*\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">TITLE</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <input type=\"text\" onChange={this.handleChange(\"title\")}  className=\"form-control\" value={this.state.title} />\n                    </div>\n         \n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">DESCRIPTION</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <textarea type=\"text\" onChange={this.handleChange(\"body\")}  className=\"form-control\" value={this.state.body} />\n                    </div>\n                    {/* when button is clicked register function is triggered */}\n                    <button onClick={this.clickSubmit} className=\"btn btn-raised btn-primary\">POST</button>\n                </form>\n\n            </div>\n        );\n    }\n}\n\nexport default NewPost;"]},"metadata":{},"sourceType":"module"}