{"ast":null,"code":"var _jsxFileName = \"E:\\\\Agile Web App\\\\social media (frontend)\\\\src\\\\user\\\\EditProfile.js\";\n//we have userid from props like in profile\n//we get userId when the component mounts\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { isAuthenticated } from '../user/Profile';\nimport DefaultAvatar from '../images/default_avatar.png';\n\nclass EditProfile extends Component {\n  constructor() {\n    super();\n\n    this.read = (userId, token) => {\n      return fetch(`${process.env.REACT_APP_API_URL}/user/${userId}`, {\n        method: \"GET\",\n        // to make only authenticated user make the request\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          // jwt token from the isAuthenticated function\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        return response.json();\n      }).catch(err => console.log(err));\n    };\n\n    this.init = userId => {\n      const token = isAuthenticated().token;\n      this.read(userId, token).then(data => {\n        if (data.error) {\n          this.setState({\n            redirectToProfile: true\n          });\n          console.log(\"ERROR\");\n        } else {\n          // console.log(data)\n          this.setState({\n            id: data._id,\n            name: data.name,\n            email: data.email,\n            error: \"\",\n            about: data.about\n          });\n        }\n      });\n    };\n\n    this.isValid = () => {\n      const {\n        name,\n        email,\n        password,\n        fileSize\n      } = this.state;\n\n      if (fileSize > 100000) {\n        //1 MB\n        this.setState({\n          error: \"FILE IS TOO LARGE TO UPLOAD\"\n        });\n        return false;\n      }\n\n      if (name.length === 0) {\n        this.setState({\n          error: \"PLEASE ENTER YOUR NAME\"\n        });\n        return false;\n      } //regular expression\n\n\n      if (!/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i.test(email)) {\n        this.setState({\n          error: \"PLEASE ENTER A VALID EMAIL\"\n        });\n        return false;\n      } //if the user dont enter the password they are using the same password\n\n\n      if (password.length >= 1 && password.length <= 5) {\n        this.setState({\n          error: \"PLEASE ENTER PASSWORD WITH MINIMUM 6 CHARACTERS AND A NUMBER\"\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        error: \"\"\n      });\n      this.setState({\n        loading: false\n      }); //we need to target the files in the events to grab from the input\n      // checks if we have photo in the name(params)\n\n      const value = name === 'photo' ? event.target.files[0] : event.target.value; //limiting upload filesize\n\n      const fileSize = name === 'photo' ? event.target.files[0].size : 0; //we populate the userData\n      //if the name is email -> it will have the value of email\n      //if the name is photo -> it will have the value of event.target.files[0]\n\n      this.userData.set(name, value); //using array syntax it changes over time\n      //based on which it is used it takes target value\n      //eg takes password when used in password\n\n      this.setState({\n        [name]: value,\n        fileSize\n      });\n    };\n\n    this.update = event => {\n      event.preventDefault(); //stop the default behaviour / page reload\n      //when the server is busy loading the form data and uploading images to keep the user experience\n\n      this.setState({\n        loading: true\n      });\n\n      if (this.isValid()) {\n        //we need name email password from the state\n        const userId = this.props.match.params.userId;\n        const token = isAuthenticated().token;\n        this.updateProfile(userId, token, this.userData).then(data => {\n          if (data.error) this.setState({\n            error: data.error\n          }); //if admin only redirect =>\n          // because when the user profile is updated, we update the local storage and The Navbar's profile info is based on localStorage user info\n          else if (isAuthenticated().user.role === \"admin\") {\n              this.setState({\n                redirectToProfile: true\n              });\n            } else {\n              // if same user update local storage and redirect\n              this.updateUser(data, () => {\n                this.setState({\n                  redirectToProfile: true\n                });\n              });\n            }\n        });\n      }\n    };\n\n    this.updateUser = (user, next) => {\n      if (typeof window !== 'undefined') {\n        if (localStorage.getItem('JWT')) {\n          let auth = JSON.parse(localStorage.getItem('JWT'));\n          auth.user = user; //to update the user date\n\n          localStorage.setItem('JWT', JSON.stringify(auth));\n          next();\n        }\n      }\n    };\n\n    this.updateProfile = (userId, token, user) => {\n      console.log(\"Update User Data\", user);\n      return fetch(`${process.env.REACT_APP_API_URL}/user/${userId}`, {\n        method: \"PUT\",\n        // to make only authenticated user make the request\n        headers: {\n          Accept: \"application/json\",\n          // jwt token from the isAuthenticated function\n          Authorization: `Bearer ${token}`\n        },\n        body: user //we dont need to stringify as we have to send actual data (ie form data)\n\n      }).then(response => {\n        return response.json();\n      }).catch(err => console.log(err));\n    };\n\n    this.state = {\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      //we wont store password in the state\n      redirectToProfile: false,\n      error: \"\",\n      loading: false,\n      fileSize: 0,\n      about: \"\"\n    };\n  } //takes userId from the init\n\n\n  //lifecycle method -> when the component is mounted and be ready\n  //then we get the user id\n  componentDidMount() {\n    this.userData = new FormData(); //browser api\n    // console.log(\"Userrouter from route params:\", this.props.match.params.userId);\n\n    const userId = this.props.match.params.userId; //giving userId to init method to process\n\n    this.init(userId);\n  } //checks if the input fields are valid\n\n\n  render() {\n    if (this.state.redirectToProfile) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/user/${this.state.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 20\n        }\n      });\n    } //this URL gives us image\n\n\n    const photoUrl = this.state.id ? `${process.env.REACT_APP_API_URL}/user/photo/${this.state.id}?${new Date().getTime()}` : //new Date().getTime() => gives us the newly updated image\n    DefaultAvatar;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"mt-5 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }\n    }, \"EDIT PROFILE\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      style: {\n        display: this.state.error ? \"\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, this.state.error), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, \"Processing...\")) : \"\", /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        height: \"200px\",\n        width: \"auto\"\n      },\n      className: \"img-thumbnail\",\n      src: photoUrl,\n      onError: i => i.target.src = `${DefaultAvatar}`,\n      alt: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 25\n      }\n    }, \"AVATAR\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.handleChange(\"photo\"),\n      className: \"form-control\",\n      accept: \"image/*\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange(\"name\"),\n      className: \"form-control\",\n      value: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 25\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      onChange: this.handleChange(\"email\"),\n      className: \"form-control\",\n      value: this.state.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 25\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      onChange: this.handleChange(\"password\"),\n      className: \"form-control\",\n      value: this.state.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, \"ABOUT\"), /*#__PURE__*/React.createElement(\"textarea\", {\n      type: \"text\",\n      onChange: this.handleChange(\"about\"),\n      className: \"form-control\",\n      value: this.state.about,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.update,\n      className: \"btn btn-raised btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default EditProfile;","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/user/EditProfile.js"],"names":["React","Component","Redirect","isAuthenticated","DefaultAvatar","EditProfile","constructor","read","userId","token","fetch","process","env","REACT_APP_API_URL","method","headers","Accept","Authorization","then","response","json","catch","err","console","log","init","data","error","setState","redirectToProfile","id","_id","name","email","about","isValid","password","fileSize","state","length","test","handleChange","event","loading","value","target","files","size","userData","set","update","preventDefault","props","match","params","updateProfile","user","role","updateUser","next","window","localStorage","getItem","auth","JSON","parse","setItem","stringify","body","componentDidMount","FormData","render","photoUrl","Date","getTime","display","height","width","i","src"],"mappings":"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","sourcesContent":["//we have userid from props like in profile\n//we get userId when the component mounts\n\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { isAuthenticated } from '../user/Profile';\n\nimport DefaultAvatar from '../images/default_avatar.png';\n\n\nclass EditProfile extends Component {\n    \n    constructor(){\n        super()\n        this.state={\n            id: \"\",\n            name:\"\",\n            email:\"\",\n            password:\"\", //we wont store password in the state\n            redirectToProfile: false, \n            error:\"\",\n            loading: false,\n            fileSize: 0, \n            about:\"\"\n        }\n    }\n    //takes userId from the init\n    read = (userId, token)=>{\n        return fetch(`${process.env.REACT_APP_API_URL}/user/${userId}`, {\n            method:\"GET\",\n            // to make only authenticated user make the request\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                // jwt token from the isAuthenticated function\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(response =>{\n            return response.json()\n        })\n        .catch(err => console.log(err))\n    }\n    \n    //it takes arguement from the componentDidMount (userId)\n    init = (userId)=>{\n        const token = isAuthenticated().token;\n        this.read(userId, token)\n        .then(data =>{\n            if(data.error){\n                this.setState({redirectToProfile: true})\n                console.log(\"ERROR\")\n            }\n            else{\n                // console.log(data)\n                this.setState({id: data._id, name: data.name, email:data.email,error: \"\", about:data.about})\n            }\n        })\n    }\n    \n    \n    //lifecycle method -> when the component is mounted and be ready\n    //then we get the user id\n    componentDidMount(){\n        this.userData = new FormData(); //browser api\n        // console.log(\"Userrouter from route params:\", this.props.match.params.userId);\n        const userId = this.props.match.params.userId\n        //giving userId to init method to process\n        this.init(userId)\n    }\n\n    //checks if the input fields are valid\n    isValid = () => {\n        const{name, email, password, fileSize} = this.state\n\n        if(fileSize > 100000){  //1 MB\n            this.setState({error: \"FILE IS TOO LARGE TO UPLOAD\"})\n            return false\n        }\n        if(name.length === 0){\n            this.setState({error: \"PLEASE ENTER YOUR NAME\"})\n            return false\n        }\n        //regular expression\n        if(!/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i.test(email)){\n            this.setState({error: \"PLEASE ENTER A VALID EMAIL\"})\n            return false\n        }\n        //if the user dont enter the password they are using the same password\n        if(password.length >= 1 && password.length <= 5){\n            this.setState({error: \"PLEASE ENTER PASSWORD WITH MINIMUM 6 CHARACTERS AND A NUMBER\"})\n            return false\n        }\n        return true\n    }\n    \n\n    //creating handle change method\n    //higher order function -> returns another function\n    // coz we need strings PLUS access to events (we used onChanged)\n    handleChange = (name)=> (event) => {\n        this.setState({error:\"\"})\n        this.setState({loading: false})\n\n        //we need to target the files in the events to grab from the input\n        // checks if we have photo in the name(params)\n        const value = name === 'photo' ? event.target.files[0] : event.target.value\n\n\n        //limiting upload filesize\n        const fileSize = name === 'photo' ? event.target.files[0].size : 0;\n\n        //we populate the userData\n        //if the name is email -> it will have the value of email\n        //if the name is photo -> it will have the value of event.target.files[0]\n        this.userData.set(name, value)\n\n        //using array syntax it changes over time\n        //based on which it is used it takes target value\n        //eg takes password when used in password\n        this.setState({[name]: value, fileSize});\n    }\n\n    update = event => {\n        event.preventDefault() //stop the default behaviour / page reload\n        //when the server is busy loading the form data and uploading images to keep the user experience\n        this.setState({loading: true})\n\n        if(this.isValid()){\n             //we need name email password from the state\n            const userId = this.props.match.params.userId;\n            const token = isAuthenticated().token;\n\n            this.updateProfile(userId, token, this.userData)\n            .then(data => {\n                    if(data.error) this.setState({error: data.error})\n                    //if admin only redirect =>\n                    // because when the user profile is updated, we update the local storage and The Navbar's profile info is based on localStorage user info\n                    else if (isAuthenticated().user.role === \"admin\") {\n                        this.setState({\n                            redirectToProfile: true\n                        });\n                    } else {\n                        // if same user update local storage and redirect\n                        this.updateUser(data, ()=>{\n                            this.setState({redirectToProfile: true})\n                        }) }\n                 \n            })\n        }\n       \n    };\n\n    //for navigation link to update the updated user from localStorage\n    //as we've set the name from the token in localStorage\n    updateUser = (user, next)=>{\n        if(typeof window !== 'undefined'){\n            if(localStorage.getItem('JWT')){\n                let auth = JSON.parse(localStorage.getItem('JWT'))\n                auth.user = user  //to update the user date\n                \n                localStorage.setItem('JWT', JSON.stringify(auth))\n                next()\n            }\n        }\n    }\n\n   //takes userId from the init\n   updateProfile = (userId, token, user)=>{\n       console.log(\"Update User Data\", user);\n        return fetch(`${process.env.REACT_APP_API_URL}/user/${userId}`, {\n            method:\"PUT\",\n            // to make only authenticated user make the request\n            headers: {\n                Accept: \"application/json\",\n                // jwt token from the isAuthenticated function\n                Authorization: `Bearer ${token}`\n            },\n            body: user  //we dont need to stringify as we have to send actual data (ie form data)\n        })\n        .then(response =>{\n            return response.json()\n        })\n        .catch(err => console.log(err))\n    }\n\n    render() {\n        if(this.state.redirectToProfile){\n            return <Redirect to={`/user/${this.state.id}`}/>\n        }\n\n        //this URL gives us image\n        const photoUrl = this.state.id ? \n            `${process.env.REACT_APP_API_URL}/user/photo/${this.state.id}?${new Date().getTime()}` :   //new Date().getTime() => gives us the newly updated image\n             DefaultAvatar\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"mt-5 mb-5\">EDIT PROFILE</h2>\n\n                {/* to keep the error div hidden we are writing instyle css\n                double {{}}  first set for jsx. second for style\n                applying conditional rendering \n                if there is error displays error, if no error it wont be displayed\n                tertiary conditional statement */}\n                <div className= \"alert alert-danger\" style={{ display: this.state.error ? \"\" : \"none\"}}>\n                    {this.state.error}\n                </div>\n\n                {this.state.loading ? (\n                    <div className=\"jumbotron text-center\">\n                        <h2>Processing...</h2>\n                     </div>\n                ):(\"\")}\n\n                <img style = {{height: \"200px\", width: \"auto\"}} className=\"img-thumbnail\" src={photoUrl} onError={i => (i.target.src=`${DefaultAvatar}`)} alt={this.state.name}/>\n\n                 {/* EDITPROFILE FORM */}\n                 <form>\n                     {/* to send the form data we need browser api -> form data\n                     provides a way to easily construct a set of key/value pairs representing form fields and their values\n                     that can be sent using the XMLHttpRequest.send() method\n                      - uses same format a form would use if the encoding type were set to \"multipart/form-data\"\n                     */}\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">AVATAR</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <input type=\"file\" onChange={this.handleChange(\"photo\")}  className=\"form-control\" accept=\"image/*\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">Name</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <input type=\"text\" onChange={this.handleChange(\"name\")}  className=\"form-control\" value={this.state.name} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">Email</label>\n                        <input  type=\"email\" onChange={this.handleChange(\"email\")}  className=\"form-control\" value={this.state.email}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">Password</label>\n                        <input type=\"password\" onChange={this.handleChange(\"password\")}  className=\"form-control\" value={this.state.password} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label className=\"text-muted\">ABOUT</label>\n                        {/* \n                            when user inputs we grab the value and put it in the state\n                            onChange we execute handleChange method event handler and\n                            \"value\" to sync the state and input => known as CONTROLLED COMPONENTS*/}\n                        <textarea type=\"text\" onChange={this.handleChange(\"about\")}  className=\"form-control\" value={this.state.about} />\n                    </div>\n                    {/* when button is clicked register function is triggered */}\n                    <button onClick={this.update} className=\"btn btn-raised btn-primary\">UPDATE</button>\n                </form>\n\n            </div>\n        );\n    }\n}\n\nexport default EditProfile;"]},"metadata":{},"sourceType":"module"}