{"ast":null,"code":"var _jsxFileName = \"E:\\\\Agile Web App\\\\social media (frontend)\\\\src\\\\followUnfollowComponent\\\\FindPeople.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport DefaultAvatar from '../images/default_avatar.png';\nimport { isAuthenticated } from '../auth';\nimport { follow } from '../user/followAPIcall';\n\nclass FindPeople extends Component {\n  //state to store users\n  constructor() {\n    super();\n\n    this.findPeople = (userId, token) => {\n      return fetch(`http://localhost:8080/user/findpeople/${userId}`, {\n        method: \"GET\",\n        // to make only authenticated user make the request\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          // jwt token from the isAuthenticated function\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => {\n        return response.json();\n      }).catch(err => console.log(err));\n    };\n\n    this.clickFollow = (user, i) => {\n      const userId = isAuthenticated().user._id;\n\n      const token = isAuthenticated().token; //follow method from followAPIcall \n\n      follow(userId, token, user._id) //gives json response -> means the user has already been followed\n      .then(data => {\n        if (data.error) {\n          this.setState({\n            error: data.error\n          });\n        } else {\n          //stores users in state which are already followed\n          let toFollow = this.state.users; //splice takes index and 1\n\n          toFollow.splice(i, 1); //what user we clicked to follow we put them in the array and cut them off\n          // when we click the follow button the array of user is one item less\n\n          this.setState({\n            users: toFollow,\n            open: true,\n            followMessage: `Following ${user.name}`\n          });\n        }\n      });\n    };\n\n    this.listUsers = users => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, users.map((user, i) =>\n    /*#__PURE__*/\n    // (<div key={i}>{user.name}</div>)\n    React.createElement(\"div\", {\n      className: \"card col-md-4\",\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      style: {\n        height: \"200px\",\n        width: \"auto\"\n      },\n      className: \"img-thumbnail\",\n      src: `${process.env.REACT_APP_API_URL}/user/photo/${user._id}`,\n      onError: i => i.target.src = `${DefaultAvatar}`,\n      alt: user.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }\n    }, user.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, user.email), /*#__PURE__*/React.createElement(Link, {\n      to: `/user/${user._id}`,\n      className: \"btn btn-raised btn -sm btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, \"VIEW PROFILE\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.clickFollow(user, i),\n      className: \"btn btn-raised btn-info float-right btn-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, \"Follow\")))));\n\n    this.state = {\n      users: [],\n      error: \"\",\n      open: false //when it is true, we show the message\n\n    };\n  } // when component mounts execute method that lists users\n\n\n  componentDidMount() {\n    const userId = isAuthenticated().user._id;\n\n    const token = isAuthenticated().token; // list method lists all the users from the api\n\n    this.findPeople(userId, token).then(data => {\n      if (data.error) {\n        console.log(data.error);\n      } else {\n        this.setState({\n          users: data\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      users,\n      open,\n      followMessage\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"mt-5 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, \" People to Follow \"), open && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 26\n      }\n    }, open && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 39\n      }\n    }, followMessage)), this.listUsers(users));\n  }\n\n}\n\nexport default FindPeople;","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/followUnfollowComponent/FindPeople.js"],"names":["React","Component","Link","DefaultAvatar","isAuthenticated","follow","FindPeople","constructor","findPeople","userId","token","fetch","method","headers","Accept","Authorization","then","response","json","catch","err","console","log","clickFollow","user","i","_id","data","error","setState","toFollow","state","users","splice","open","followMessage","name","listUsers","map","height","width","process","env","REACT_APP_API_URL","target","src","email","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport DefaultAvatar from '../images/default_avatar.png';\nimport { isAuthenticated } from '../auth';\nimport { follow } from '../user/followAPIcall';\n\nclass FindPeople extends Component {\n\n    //state to store users\n    constructor(){\n        super()\n        this.state = {\n            users:[],\n            error:\"\", \n            open:false //when it is true, we show the message\n        }\n    }\n\n    // when component mounts execute method that lists users\n    componentDidMount(){\n        const userId = isAuthenticated().user._id\n        const token = isAuthenticated().token\n        // list method lists all the users from the api\n        this.findPeople(userId, token)\n            .then(data =>{\n                if(data.error){console.log(data.error)}\n                else{this.setState({users:data})}\n            })\n    }\n\n    findPeople = (userId, token)=>{\n        return fetch(`http://localhost:8080/user/findpeople/${userId}`, {\n            method:\"GET\",\n            // to make only authenticated user make the request\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                // jwt token from the isAuthenticated function\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(response =>{\n            return response.json()\n        })\n        .catch(err => console.log(err))\n    }\n\n\n\n    //follow button click event -> takes user and index as arguement\n    clickFollow = (user, i)=>{\n        const userId = isAuthenticated().user._id\n        const token = isAuthenticated().token\n\n        //follow method from followAPIcall \n        follow(userId, token, user._id) //gives json response -> means the user has already been followed\n        .then(data =>{\n            if(data.error){this.setState({error:data.error})}\n            else{\n                //stores users in state which are already followed\n                let toFollow = this.state.users\n                //splice takes index and 1\n                toFollow.splice(i, 1)  //what user we clicked to follow we put them in the array and cut them off\n                // when we click the follow button the array of user is one item less\n                this.setState(({users:toFollow, open:true, followMessage: `Following ${user.name}`}))\n            }\n        })\n\n    }\n\n    listUsers = users => (\n        <div className=\"row\">\n            {/* {JSON.stringify(users)} */}\n            {/* looping through users array. map function works only with array */}\n            {users.map((user,i)=> (\n                // (<div key={i}>{user.name}</div>)\n                <div className=\"card col-md-4\"  key={i}>\n                    <img style = {{height: \"200px\", width: \"auto\"}} className=\"img-thumbnail\" src={`${process.env.REACT_APP_API_URL}/user/photo/${user._id}`} onError={i => (i.target.src=`${DefaultAvatar}`)} alt={user.name}/>\n                  \n                    {/* <img className=\"card-img-top\" style ={{width: \"100%\", height: \"15vw\", objectFit:\"cover\"}} src={DefaultAvatar} alt={user.name}/> */}\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{user.name}</h5>\n                        <p className=\"card-text\">{user.email}</p>\n                        <Link to={`/user/${user._id}`} className=\"btn btn-raised btn -sm btn-primary\">VIEW PROFILE</Link>\n                        <button onClick={()=>this.clickFollow(user, i)} className=\"btn btn-raised btn-info float-right btn-sm\">Follow</button>\n                    </div>\n                </div>\n            ))}\n        </div>\n    )\n\n\n\n    render() {\n        const {users, open, followMessage} = this.state\n        return (\n            <div className =\"container\">\n                <h2 className=\"mt-5 mb-5\"> People to Follow </h2>\n                    {open && (\n                         <div className=\"alert alert-success\">\n                            {open && (<p>{followMessage}</p>)}\n                         </div>\n                    )}\n                {this.listUsers(users)}\n            </div>\n        );\n    }\n}\n\nexport default FindPeople;"]},"metadata":{},"sourceType":"module"}