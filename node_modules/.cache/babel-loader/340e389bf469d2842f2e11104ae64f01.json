{"ast":null,"code":"var _jsxFileName = \"E:\\\\Agile Web App\\\\social media (frontend)\\\\src\\\\auth\\\\ProtectedRoutes.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isAuthenticated } from '../user/Profile'; //https://reacttraining.com/react-router/web/example/auth-workflow\n// functional component -> to give access to valid users only.\n//takes component and \n\nconst ProtectedRoutes = ({\n  component: Component,\n  ...rest\n}) => {\n  //props means components passed down to the protected route component\n  return /*#__PURE__*/React.createElement(Route //takes rest of the props and render props using arrow function \n  , Object.assign({}, rest, {\n    render: props => isAuthenticated ?\n    /*#__PURE__*/\n    //check if the user is authenticated\n    React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect //if NOT authenticated redirect them to the login page\n    , {\n      to: {\n        pathname: \"/login\",\n        state: {\n          from: props.location\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ProtectedRoutes;","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/auth/ProtectedRoutes.js"],"names":["React","Route","Redirect","isAuthenticated","ProtectedRoutes","component","Component","rest","props","pathname","state","from","location"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,kBAA9B;AACA,SAAQC,eAAR,QAA8B,iBAA9B,C,CAGA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAC5D;AACC,sBACE,oBAAC,KAAD,CAAQ;AAAR,sBACMA,IADN;AAEE,IAAA,MAAM,EAAEC,KAAK,IACXL,eAAe;AAAA;AAAM;AACnB,wBAAC,SAAD,oBAAeK,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADa,gBAGb,oBAAC,QAAD,CAAW;AAAX;AACE,MAAA,EAAE,EAAE;AACFC,QAAAA,QAAQ,EAAE,QADR;AAEFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEH,KAAK,CAACI;AAAd;AAFL,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAiBD,CAnBH;;AAqBE,eAAeR,eAAf","sourcesContent":["\nimport React from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {isAuthenticated} from '../user/Profile';\n\n\n//https://reacttraining.com/react-router/web/example/auth-workflow\n// functional component -> to give access to valid users only.\n//takes component and \nconst ProtectedRoutes = ({ component: Component, ...rest }) => {\n   //props means components passed down to the protected route component\n    return (\n      <Route  //takes rest of the props and render props using arrow function \n        {...rest}\n        render={props =>\n          isAuthenticated ? (  //check if the user is authenticated\n            <Component {...props} />\n          ) : (\n            <Redirect  //if NOT authenticated redirect them to the login page\n              to={{\n                pathname: \"/login\",\n                state: { from: props.location }\n              }}\n            />\n          )\n        }\n      />\n    );\n  }\n\n  export default ProtectedRoutes;"]},"metadata":{},"sourceType":"module"}