{"ast":null,"code":"var _jsxFileName = \"E:\\\\Agile Web App\\\\social media (frontend)\\\\src\\\\post\\\\PostDetails.js\";\nimport React, { Component } from 'react';\nimport { singlePost, remove, like, unlike } from './postAPI';\nimport { Link, Redirect } from 'react-router-dom';\nimport DefaultPostImage from '../images/defaultpostimage.jpg'; // import { isAuthenticated } from \"../auth\";\n\nimport Comment from './Comment'; //is authenticated method checks if the user is authenticated (checks the token in local storage)\n//we can conditionally show and hide links based on this helper method\n\nexport const isAuthenticated = () => {\n  if (typeof window == \"undefined\") {\n    return false;\n  }\n\n  if (localStorage.getItem(\"JWT\")) {\n    //parse the token (as it contains user information)\n    return JSON.parse(localStorage.getItem(\"JWT\"));\n  } else {\n    return false;\n  }\n};\n\nclass PostDetails extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      post: '',\n      redirect: false,\n      redirectToLogin: false,\n      like: false,\n      //keeps track of the user (wether liked or not)\n      likes: 0,\n      //array\n      comments: []\n    };\n\n    this.componentDidMount = () => {\n      // debugger;\n      const postId = this.props.match.params.postId;\n      singlePost(postId).then(data => {\n        if (data.error) {\n          console.log(data.error);\n        } else {\n          this.setState({\n            post: data,\n            likes: data.likes.length,\n            like: this.checkLike(data.likes),\n            comments: data.comments\n          });\n        }\n      });\n    };\n\n    this.deletePost = () => {\n      const postId = this.props.match.params.postId;\n      const token = isAuthenticated().token;\n      remove(postId, token).then(data => {\n        if (data.error) {\n          console.log(data.error);\n        } else {\n          this.setState({\n            redirect: true\n          });\n        }\n      });\n    };\n\n    this.updateComments = comments => {\n      this.setState({\n        comments\n      });\n    };\n\n    this.deleteConfirm = () => {\n      //we are using alert given by window in default\n      let answer = window.confirm(\"Are you sure you want to delete this post?\");\n\n      if (answer) {\n        this.deletePost();\n      }\n    };\n\n    this.checkLike = likes => {\n      //for not logged in user to handle error\n      const userId = isAuthenticated() && isAuthenticated().user._id;\n\n      let match = likes.indexOf(userId) !== -1; //userId in likes array (if not found returns -1)\n\n      return match;\n    };\n\n    this.likeUnlike = () => {\n      if (!isAuthenticated()) {\n        //for not logged in user to handle error\n        this.setState({\n          redirectToLogin: true\n        });\n        return false; //rest of the code is not executed\n      } //if state.like is true we make put request to unlike else we request post/like\n\n\n      let callApi = this.state.like ? unlike : like;\n\n      const userId = isAuthenticated().user._id;\n\n      const postId = this.state.post._id;\n      const token = isAuthenticated().token;\n      callApi(userId, token, postId).then(data => {\n        if (data.error) {\n          console.log(data.error);\n        } else {\n          this.setState({\n            like: !this.state.like,\n            likes: data.likes.length\n          });\n        }\n      });\n    };\n\n    this.renderPost = post => {\n      const posterId = post.postedBy ? `/user/${post.postedBy._id}` : \"\"; //to unable click the anonymous user posts\n\n      const posterName = post.postedBy ? post.postedBy.name : \"Anonymous\";\n      const {\n        like,\n        likes\n      } = this.state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        style: {\n          height: \"300px\",\n          width: \"100%\",\n          objectFit: \"cover\"\n        },\n        className: \"img-thumbnail mb-3\",\n        src: `${process.env.REACT_APP_API_URL}/post/photo/${post._id}`,\n        onError: i => i.target.src = `${DefaultPostImage}`,\n        alt: post.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      }), like ? /*#__PURE__*/React.createElement(\"h5\", {\n        onClick: this.likeUnlike,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-heart text-success bg-light\",\n        style: {\n          padding: \"10px\",\n          borderRadius: \"50%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }\n      }), \" \", \" \", likes, \" likes \") : /*#__PURE__*/React.createElement(\"h5\", {\n        onClick: this.likeUnlike,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-heart-o text-success bg-light\",\n        style: {\n          padding: \"10px\",\n          borderRadius: \"50%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 28\n        }\n      }), \" \", likes, \" likes \"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"card-text\",\n        style: {\n          wordBreak: \"break-all\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }, post.body), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"font-italic mark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }\n      }, \"Posted by: \", /*#__PURE__*/React.createElement(Link, {\n        to: `${posterId}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 36\n        }\n      }, posterName), \" \", \" on \", new Date(post.created).toDateString()), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-inline-block \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: `/`,\n        className: \"btn btn-raised btn-sm btn-primary mr-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }\n      }, \"VIEW ALL POSTS\"), isAuthenticated().user && isAuthenticated().user._id === post.postedBy._id && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Link, {\n        to: `/post/update/${post._id}`,\n        className: \"btn btn-raised btn-sm btn-info mr-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 33\n        }\n      }, \"UPDATE\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.deleteConfirm,\n        className: \"btn btn-raised btn-sm btn-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 33\n        }\n      }, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }\n      }, isAuthenticated().user && isAuthenticated().user.role === \"admin\" && /*#__PURE__*/React.createElement(\"div\", {\n        class: \"card mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 45\n        }\n      }, \"Admin\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"mb-2 text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 45\n        }\n      }, \"Edit/Delete as an Admin\"), /*#__PURE__*/React.createElement(Link, {\n        to: `/post/update/${post._id}`,\n        className: \"btn btn-raised btn-warning btn-sm mr-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 45\n        }\n      }, \"Update Post\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.deleteConfirm,\n        className: \"btn btn-raised btn-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 45\n        }\n      }, \"Delete Post\"))))));\n    };\n  }\n\n  render() {\n    const {\n      post,\n      redirect,\n      redirectToLogin,\n      comments\n    } = this.state;\n\n    if (redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 20\n        }\n      });\n    } else if (redirectToLogin) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: `/login`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"display-2 mt-3 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, post.title), !post ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jumbotron text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 25\n      }\n    }, \"Loading...\")) : this.renderPost(post), /*#__PURE__*/React.createElement(Comment, {\n      postId: post._id,\n      comments: comments.reverse(),\n      updateComments: this.updateComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default PostDetails;","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/post/PostDetails.js"],"names":["React","Component","singlePost","remove","like","unlike","Link","Redirect","DefaultPostImage","Comment","isAuthenticated","window","localStorage","getItem","JSON","parse","PostDetails","state","post","redirect","redirectToLogin","likes","comments","componentDidMount","postId","props","match","params","then","data","error","console","log","setState","length","checkLike","deletePost","token","updateComments","deleteConfirm","answer","confirm","userId","user","_id","indexOf","likeUnlike","callApi","renderPost","posterId","postedBy","posterName","name","height","width","objectFit","process","env","REACT_APP_API_URL","i","target","src","padding","borderRadius","wordBreak","body","Date","created","toDateString","role","render","title","reverse"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {singlePost, remove, like, unlike} from './postAPI'\nimport { Link, Redirect } from 'react-router-dom';\nimport DefaultPostImage from '../images/defaultpostimage.jpg';\n// import { isAuthenticated } from \"../auth\";\n\n\nimport Comment from './Comment'\n\n\n//is authenticated method checks if the user is authenticated (checks the token in local storage)\n//we can conditionally show and hide links based on this helper method\nexport const isAuthenticated =() =>{\n    if(typeof window == \"undefined\"){\n        return false;\n    }\n\n    if(localStorage.getItem(\"JWT\")){\n        //parse the token (as it contains user information)\n        return JSON.parse(localStorage.getItem(\"JWT\"))\n    }else{\n        return false;\n    }\n}\n\n\nclass PostDetails extends Component {\n    state={\n        post:'',\n        redirect: false,\n        redirectToLogin: false,\n        like:false,  //keeps track of the user (wether liked or not)\n        likes: 0,  //array\n        comments: []\n    }\n\n    componentDidMount = () =>{\n        // debugger;\n        const postId = this.props.match.params.postId\n        singlePost(postId).then(data =>{\n            if(data.error) {console.log(data.error)}\n            else {this.setState({post: data, likes: data.likes.length, like: this.checkLike(data.likes), comments: data.comments})}\n        })\n    }\n\n    deletePost = () =>{\n        const postId = this.props.match.params.postId\n        const token = isAuthenticated().token\n        remove(postId, token)\n        .then(data =>{\n            if(data.error) {console.log(data.error)}\n            else {this.setState({redirect: true})}\n        })\n    }\n\n    //get all the commments and repopulate the comments in the state\n    updateComments = comments =>{\n        this.setState({comments})\n    }\n\n     //asks for user confirmation to delete the account\n    //after the response by the user deleteAccount function is called\n    deleteConfirm = () =>{\n        //we are using alert given by window in default\n        let answer = window.confirm(\"Are you sure you want to delete this post?\")\n        if(answer){\n            this.deletePost();\n        }\n    }\n\n    //check if the currently logged in user is already in the likes array\n    checkLike = likes => {\n        //for not logged in user to handle error\n        const userId = isAuthenticated() && isAuthenticated().user._id;\n        let match = likes.indexOf(userId) !== -1;  //userId in likes array (if not found returns -1)\n        return match;\n    };\n\n    //makes request to backend to like and unlike \n    likeUnlike =()=>{\n        if(!isAuthenticated()){\n        //for not logged in user to handle error\n            this.setState({redirectToLogin:true}) \n            return false; //rest of the code is not executed\n        }\n        //if state.like is true we make put request to unlike else we request post/like\n        let callApi = this.state.like ? unlike : like\n        const userId = isAuthenticated().user._id\n        const postId = this.state.post._id\n        const token = isAuthenticated().token\n\n        callApi(userId, token, postId)\n        .then(data =>{\n            if(data.error) {console.log(data.error)}\n            else {this.setState({like: !this.state.like, likes: data.likes.length})}\n        })\n\n    }\n\n    renderPost = (post) =>{\n        const posterId = post.postedBy ? `/user/${post.postedBy._id}` : \"\"  //to unable click the anonymous user posts\n        const posterName = post.postedBy ? post.postedBy.name : \"Anonymous\"\n\n\n        const { like, likes } = this.state;\n\n        return (\n                <div className=\"card-body\">\n                    <img style = {{height: \"300px\", width: \"100%\", objectFit:\"cover\"}} className=\"img-thumbnail mb-3\" src={`${process.env.REACT_APP_API_URL}/post/photo/${post._id}`} onError={i => (i.target.src=`${DefaultPostImage}`)} alt={post.name}/>\n                    \n                    {/* like styling */}\n                    {like ? (\n                        <h5 onClick={this.likeUnlike}>\n                            <i className=\"fa fa-heart text-success bg-light\" style={{padding: \"10px\", borderRadius:\"50%\"}}></i> \n                            {\" \"} {likes} likes </h5>\n                    ) : (\n                        <h5 onClick={this.likeUnlike}> \n                           <i className=\"fa fa-heart-o text-success bg-light\" style={{padding: \"10px\", borderRadius:\"50%\"}}></i> \n                            {\" \"}\n                            {likes} likes </h5>\n                    )}\n\n                    \n                    <p className=\"card-text\" style={{wordBreak: \"break-all\"}}>{post.body}</p>\n                    <br/>\n                    <p className=\"font-italic mark\">\n                        Posted by: <Link to = {`${posterId}`}>{posterName}</Link>\n                        {\" \"} on {new Date(post.created).toDateString()}\n                    </p>\n                    <div className=\"d-inline-block \">\n                        <Link to={`/`} className=\"btn btn-raised btn-sm btn-primary mr-5\">VIEW ALL POSTS</Link>\n{/*                       \n                        {console.log(\"USER\", isAuthenticated().user)}\n                        {console.log(\"UserID\",isAuthenticated().user._id)}\n                        {console.log(\"StateUserID\",post.postedBy._id )} */}\n                        \n                        {isAuthenticated().user &&\n                        isAuthenticated().user._id === post.postedBy._id && (\n                            <> \n                                <Link to={`/post/update/${post._id}`} className=\"btn btn-raised btn-sm btn-info mr-5\">UPDATE</Link>\n\n                                <button onClick={this.deleteConfirm} className=\"btn btn-raised btn-sm btn-danger\">\n                                    DELETE\n                                </button>\n                            </>\n                        )} \n                        \n                        {/* Update/Delete buttons for SuperAdmin */}\n                        <div>\n                            {isAuthenticated().user &&\n                                isAuthenticated().user.role === \"admin\" && (\n                                    <div class=\"card mt-5\">\n                                        <div className=\"card-body\">\n                                            <h5 className=\"card-title\">Admin</h5>\n                                            <p className=\"mb-2 text-danger\">\n                                                Edit/Delete as an Admin\n                                            </p>\n                                            <Link\n                                                to={`/post/update/${post._id}`}\n                                                className=\"btn btn-raised btn-warning btn-sm mr-5\"\n                                            >\n                                                Update Post\n                                            </Link>\n                                            <button\n                                                onClick={this.deleteConfirm}\n                                                className=\"btn btn-raised btn-danger\"\n                                            >\n                                                Delete Post\n                                            </button>\n                                        </div>\n                                    </div>\n                                )}\n                        </div>\n                    </div>\n                </div>\n        )\n    }\n\n\n\n    render() {\n        const {post, redirect, redirectToLogin, comments} = this.state\n\n        if(redirect){\n            return <Redirect to={`/`}/>\n        } else if(redirectToLogin){\n            return <Redirect to={`/login`}/>\n        }\n\n        return (\n            <div className=\"container\">\n                <h2 className=\"display-2 mt-3 mb-5\">{post.title}</h2>\n                {/* {JSON.stringify(this.state.post)}   */}\n                {!post ? (\n                    <div className=\"jumbotron text-center\">\n                        <h2>Loading...</h2>\n                    </div>\n                ) : (\n                    this.renderPost(post)\n                )}\n\n                {/* sending props to the comment component so that we can access postId and*/}\n                {/* <Comment postId={post._id} comments={comments} updateComments={this.updateComments}/>   */}\n                <Comment\n                    postId={post._id}\n                    comments={comments.reverse()}\n                    updateComments={this.updateComments}\n                />\n            </div>\n        );\n    }\n}\n\nexport default PostDetails;"]},"metadata":{},"sourceType":"module"}