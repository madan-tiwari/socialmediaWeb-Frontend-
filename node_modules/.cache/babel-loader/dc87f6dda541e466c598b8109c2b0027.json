{"ast":null,"code":"export const createPost = (userId, token, post) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/new/${userId}`, {\n    method: \"POST\",\n    // to make only authenticated user make the request\n    headers: {\n      Accept: \"application/json\",\n      // jwt token from the isAuthenticated function\n      Authorization: `Bearer ${token}`\n    },\n    body: post\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //get all the users from api\n\nexport const list = page => {\n  return fetch(`${process.env.REACT_APP_API_URL}/posts/?page=${page}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singlePost = postId => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //get all posts by a single user\n\nexport const postsByUser = (userId, token) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/posts/by/${userId}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      'Content-Type': 'application/json',\n      // jwt token from the isAuthenticated function\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const remove = (postId, token) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n    method: \"DELETE\",\n    // to make only authenticated user make the request\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      // jwt token from the isAuthenticated function\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //takes userId from the init\n\nexport const update = (postId, token, post) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n    method: \"PUT\",\n    // to make only authenticated user make the request\n    headers: {\n      Accept: \"application/json\",\n      // jwt token from the isAuthenticated function\n      Authorization: `Bearer ${token}`\n    },\n    body: post //we dont need to stringify as we have to send actual data (ie form data)\n\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; // like-unlike\n\nexport const like = (userId, token, postId) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/like`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      userId,\n      postId\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const unlike = (userId, token, postId) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/unlike`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      userId,\n      postId\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; // comments\n\nexport const comment = (userId, token, postId, comment) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/comment`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      userId,\n      postId,\n      comment\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const uncomment = (userId, token, postId, comment) => {\n  return fetch(`${process.env.REACT_APP_API_URL}/post/uncomment`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      userId,\n      postId,\n      comment\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/post/postAPI.js"],"names":["createPost","userId","token","post","fetch","process","env","REACT_APP_API_URL","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","list","page","singlePost","postId","postsByUser","remove","update","like","JSON","stringify","unlike","comment","uncomment"],"mappings":"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","sourcesContent":["export const createPost = (userId, token, post)=>{\n    return fetch(`${process.env.REACT_APP_API_URL}/post/new/${userId}`, {\n        method:\"POST\",\n        // to make only authenticated user make the request\n        headers: {\n            Accept: \"application/json\",\n            // jwt token from the isAuthenticated function\n            Authorization: `Bearer ${token}`\n        },\n        body: post\n    })\n    .then(response =>{\n        return response.json()\n    })\n    .catch(err => console.log(err))\n}\n\n//get all the users from api\nexport const list = page =>{\n    return fetch(`${process.env.REACT_APP_API_URL}/posts/?page=${page}`,{\n        method:\"GET\",\n    })\n    .then(response =>{\n        return response.json()\n    })\n    .catch(err => console.log(err))\n}\n\nexport const singlePost = (postId) =>{\n    return fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`,{\n        method:\"GET\",\n    })\n    .then(response =>{\n        return response.json()\n    })\n    .catch(err => console.log(err))\n}\n\n//get all posts by a single user\nexport const postsByUser = (userId, token) =>{\n    return fetch(`${process.env.REACT_APP_API_URL}/posts/by/${userId}`,{\n        method:\"GET\",\n        headers: {\n            Accept: \"application/json\",\n            'Content-Type': 'application/json',\n            // jwt token from the isAuthenticated function\n            Authorization: `Bearer ${token}`\n        }\n    })\n    .then(response =>{\n        return response.json()\n    })\n    .catch(err => console.log(err))\n}\n\nexport const remove = (postId, token)=>{\n    return fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n        method:\"DELETE\",\n        // to make only authenticated user make the request\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            // jwt token from the isAuthenticated function\n            Authorization: `Bearer ${token}`\n        }\n    })\n    .then(response =>{\n        return response.json()\n    })\n    .catch(err => console.log(err))\n}\n\n\n\n//takes userId from the init\nexport const update = (postId, token, post)=>{\n     return fetch(`${process.env.REACT_APP_API_URL}/post/${postId}`, {\n         method:\"PUT\",\n         // to make only authenticated user make the request\n         headers: {\n             Accept: \"application/json\",\n             // jwt token from the isAuthenticated function\n             Authorization: `Bearer ${token}`\n         },\n         body: post  //we dont need to stringify as we have to send actual data (ie form data)\n     })\n     .then(response =>{\n         return response.json()\n     })\n     .catch(err => console.log(err))\n }\n\n// like-unlike\nexport const like = (userId, token, postId) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/post/like`, {\n        method: \"PUT\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId, postId })\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const unlike = (userId, token, postId) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/post/unlike`, {\n        method: \"PUT\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId, postId })\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\n// comments\nexport const comment = (userId, token, postId, comment) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/post/comment`, {\n        method: \"PUT\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId, postId, comment })\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const uncomment = (userId, token, postId, comment) => {\n    return fetch(`${process.env.REACT_APP_API_URL}/post/uncomment`, {\n        method: \"PUT\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({ userId, postId, comment })\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}