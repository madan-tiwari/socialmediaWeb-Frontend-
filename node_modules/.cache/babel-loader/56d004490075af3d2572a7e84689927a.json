{"ast":null,"code":"export const signup = user => {\n  // we need to make post request ->we can use axios(http client)\n  // we are using fetch (no need to install 3rd party)\n  //1st arguement - URL\n  return fetch(\"http://localhost:8080/signup\", {\n    method: \"POST\",\n    //type of request\n    headers: {\n      Accept: \"application/json\",\n      //contenttype application/json \n      \"Content-Type\": \"application/json\"\n    },\n    //like in postman \n    body: JSON.stringify(user)\n  }).then(res => {\n    return res.json();\n  }).catch(err => console.log(err));\n};\nexport const signin = user => {\n  // we need to make post request ->we can use axios(http client)\n  // we are using fetch (no need to install 3rd party)\n  //1st arguement - URL\n  return fetch(\"http://localhost:8080/signin\", {\n    method: \"POST\",\n    //type of request\n    headers: {\n      Accept: \"application/json\",\n      //contenttype application/json \n      \"Content-Type\": \"application/json\"\n    },\n    //like in postman \n    body: JSON.stringify(user)\n  }).then(res => {\n    return res.json();\n  }).catch(err => console.log(err));\n};\nexport const validLogin = (jwt, next) => {\n  // we check if window object is available (good practice)\n  if (typeof window !== \"undefined\") {\n    //access local storage\n    //localstorage has 2 methodsL setItem and getItem\n    localStorage.setItem(\"JWT\", JSON.stringify(jwt));\n    next();\n  }\n};\nexport const signout = next => {\n  //check if token from local storage is deleted\n  // call the api to logout\n  if (typeof window !== \"undefined\") localStorage.removeItem(\"JWT\");\n  next();\n  return fetch(\"http://localhost:8080/signout\", {\n    method: \"GET\"\n  }).then(response => {\n    console.log('signout', response.body.message);\n    return response.json();\n  }).catch(err => console.log(err));\n}; //is authenticated method checks if the user is authenticated (checks the token in local storage)\n//we can conditionally show and hide links based on this helper method\n\nexport const isAuthenticated = () => {\n  if (typeof window == \"undefined\") {\n    return false;\n  }\n\n  if (localStorage.getItem(\"JWT\")) {\n    //parse the token (as it contains user information)\n    return JSON.parse(localStorage.getItem(\"JWT\"));\n  } else {\n    return false;\n  }\n};\nexport const authenticate = (jwt, next) => {\n  if (typeof window !== \"undefined\") {\n    localStorage.setItem(\"jwt\", JSON.stringify(jwt));\n    next();\n  }\n}; //METHOD TO MAKE POST REQUEST TO BACKEND\n\nexport const socialLogin = user => {\n  return fetch(`${process.env.REACT_APP_API_URL}/social-login/`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    // credentials: \"include\", // works only in the same origin\n    body: JSON.stringify(user)\n  }).then(response => {\n    console.log(\"signin response: \", response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const forgotPassword = email => {\n  console.log(\"email: \", email);\n  return fetch(`${process.env.REACT_APP_API_URL}/forgot-password/`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email\n    })\n  }).then(response => {\n    console.log(\"forgot password response: \", response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const resetPassword = resetInfo => {\n  return fetch(`${process.env.REACT_APP_API_URL}/reset-password/`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(resetInfo)\n  }).then(response => {\n    console.log(\"forgot password response: \", response);\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["E:/Agile Web App/social media (frontend)/src/auth/index.js"],"names":["signup","user","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","catch","err","console","log","signin","validLogin","jwt","next","window","localStorage","setItem","signout","removeItem","response","message","isAuthenticated","getItem","parse","authenticate","socialLogin","process","env","REACT_APP_API_URL","forgotPassword","email","resetPassword","resetInfo"],"mappings":"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","sourcesContent":["export const signup = user => {\r\n    // we need to make post request ->we can use axios(http client)\r\n     // we are using fetch (no need to install 3rd party)\r\n     //1st arguement - URL\r\n     return fetch(\"http://localhost:8080/signup\", {\r\n        method: \"POST\",  //type of request\r\n        headers:{\r\n            Accept: \"application/json\",  //contenttype application/json \r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        //like in postman \r\n        body: JSON.stringify(user) \r\n    })\r\n    .then(res =>{\r\n        return res.json()\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\n\r\nexport const signin = user => {\r\n    // we need to make post request ->we can use axios(http client)\r\n     // we are using fetch (no need to install 3rd party)\r\n     //1st arguement - URL\r\n     return fetch(\"http://localhost:8080/signin\", {\r\n        method: \"POST\",  //type of request\r\n        headers:{\r\n            Accept: \"application/json\",  //contenttype application/json \r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        //like in postman \r\n        body: JSON.stringify(user) \r\n    })\r\n    .then(res =>{\r\n        return res.json()\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\n export const validLogin = (jwt, next ) => {\r\n    // we check if window object is available (good practice)\r\n    if(typeof window !== \"undefined\"){\r\n        //access local storage\r\n        //localstorage has 2 methodsL setItem and getItem\r\n        localStorage.setItem(\"JWT\" , JSON.stringify(jwt))\r\n        next()\r\n    }\r\n}\r\n\r\nexport const signout = (next)=>{\r\n    //check if token from local storage is deleted\r\n  // call the api to logout\r\n  if(typeof window !== \"undefined\") localStorage.removeItem(\"JWT\")\r\n      next()\r\n      return fetch(\"http://localhost:8080/signout\", {\r\n          method: \"GET\"\r\n      })\r\n      .then(response => {\r\n          console.log('signout', response.body.message);\r\n          return response.json()\r\n      })\r\n      .catch(err => console.log(err))\r\n};\r\n\r\n\r\n//is authenticated method checks if the user is authenticated (checks the token in local storage)\r\n//we can conditionally show and hide links based on this helper method\r\nexport const isAuthenticated = () =>{\r\n  if(typeof window == \"undefined\"){\r\n      return false;\r\n  }\r\n\r\n  if(localStorage.getItem(\"JWT\")){\r\n      //parse the token (as it contains user information)\r\n      return JSON.parse(localStorage.getItem(\"JWT\"))\r\n  }else{\r\n      return false;\r\n  }\r\n}\r\n\r\nexport const authenticate = (jwt, next) => {\r\n    if (typeof window !== \"undefined\") {\r\n        localStorage.setItem(\"jwt\", JSON.stringify(jwt));\r\n        next();\r\n    }\r\n};\r\n\r\n//METHOD TO MAKE POST REQUEST TO BACKEND\r\nexport const socialLogin = user => {\r\n    return fetch(`${process.env.REACT_APP_API_URL}/social-login/`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        // credentials: \"include\", // works only in the same origin\r\n        body: JSON.stringify(user)\r\n    })\r\n        .then(response => {\r\n            console.log(\"signin response: \", response);\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n\r\nexport const forgotPassword = email => {\r\n    console.log(\"email: \", email);\r\n    return fetch(`${process.env.REACT_APP_API_URL}/forgot-password/`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ email })\r\n    })\r\n        .then(response => {\r\n            console.log(\"forgot password response: \", response);\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n \r\nexport const resetPassword = resetInfo => {\r\n    return fetch(`${process.env.REACT_APP_API_URL}/reset-password/`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(resetInfo)\r\n    })\r\n        .then(response => {\r\n            console.log(\"forgot password response: \", response);\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};"]},"metadata":{},"sourceType":"module"}